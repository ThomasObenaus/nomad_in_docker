#!/bin/bash
# This script can be used to install nomad and consul in the specified version.
# operating systems:
#
# 1. Ubuntu 19.04

set -e

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: install-nomad-with-consul [OPTIONS]"
  echo
  echo "This script can be used to install nomad and consul in the specified version."
  echo
  echo "Options:"
  echo
  echo -e "  --version\t\tThe version of Nomad to install. Required."
  echo -e "  --consul-version\t\tThe version of Consul to install. Required."
  echo
  echo "Example:"
  echo
  echo "  install-nomad-with-consul --version 0.9.1 --consul-version 1.1.1"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function user_exists {
  local readonly username="$1"
  id "$username" >/dev/null 2>&1
}

function create_user {
  local readonly username="$1"

  if $(user_exists "$username"); then
    echo "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    useradd "$username"
  fi
}

function create_install_paths {
  local readonly path="$1"
  local readonly username="$2"

  log_info "Creating install dirs for Nomad at $path"
  mkdir -p "$path"
  mkdir -p "$path/bin"
  mkdir -p "$path/config"
  mkdir -p "$path/data"
  mkdir -p "$path/log"

  log_info "Changing ownership of $path to $username"
  chown -R "$username:$username" "$path"
}

function install_nomad_binaries {
  local readonly version="$1"
  local readonly path="$2"
  local readonly username="$3"

  local readonly url="https://releases.hashicorp.com/nomad/${version}/nomad_${version}_linux_amd64.zip"
  local readonly download_path="/tmp/nomad_${version}_linux_amd64.zip"
  local readonly bin_dir="$path/bin"
  local readonly nomad_dest_path="$bin_dir/nomad"

  log_info "Downloading Nomad $version from $url to $download_path"
  curl -o "$download_path" "$url"
  unzip -d /tmp "$download_path"

  log_info "Moving Nomad binary to $nomad_dest_path"
  mv "/tmp/nomad" "$nomad_dest_path"
  chown "$username:$username" "$nomad_dest_path"
  chmod a+x "$nomad_dest_path"

  local readonly symlink_path="$SYSTEM_BIN_DIR/nomad"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $nomad_dest_path in $symlink_path"
    ln -s "$nomad_dest_path" "$symlink_path"
  fi
}


function install_consul_binaries {
  local readonly version="$1"
  local readonly path="$2"
  local readonly username="$3"

  local readonly url="https://releases.hashicorp.com/consul/${version}/consul_${version}_linux_amd64.zip"
  local readonly download_path="/tmp/consul_${version}_linux_amd64.zip"
  local readonly bin_dir="$path/bin"
  local readonly consul_dest_path="$bin_dir/consul"

  log_info "Downloading Consul $version from $url to $download_path"
  curl -o "$download_path" "$url"
  unzip -d /tmp "$download_path"

  log_info "Moving Consul binary to $consul_dest_path"
  mv "/tmp/consul" "$consul_dest_path"
  chown "$username:$username" "$consul_dest_path"
  chmod a+x "$consul_dest_path"

  local readonly symlink_path="$SYSTEM_BIN_DIR/consul"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $consul_dest_path in $symlink_path"
    ln -s "$consul_dest_path" "$symlink_path"
  fi
}

function install {
  local version=""
  local consul_version=""
  

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        version="$2"
        shift
        ;;
      --consul-version)
        consul_version="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--version" "$version"
  assert_not_empty "--consul-version" "$consul_version"

  local nomad_user="nomad"
  local nomad_path="/opt/nomad"
  local consul_user="consul"
  local consul_path="/opt/consul"

  log_info "############################ INSTALL NOMAD ($version) ###########################"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "############################ INSTALL NOMAD ##################################"

  create_user "$nomad_user"
  create_install_paths "$nomad_path" "$nomad_user"
  install_nomad_binaries "$version" "$nomad_path" $nomad_user
  # write version file
  echo "$version" > nomad.version

  log_info "Install nomad complete!"

  log_info "############################ INSTALL CONSUL ($consul_version) ###########################"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "#                                                                           #"
  log_info "############################ INSTALL CONSUL ##################################"
  log_info "Install consul ($consul_version)"

  create_user "$consul_user"
  create_install_paths "$consul_path" "$consul_user"
  install_consul_binaries "$consul_version"
  # write version file
  echo "$consul_version" > consul.version

  log_info "Install consul complete!"
}

install "$@"
